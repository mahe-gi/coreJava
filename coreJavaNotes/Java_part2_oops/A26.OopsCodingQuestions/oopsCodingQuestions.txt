| #     | Concept(s)                | Task Description                                             |
| ----- | ------------------------- | ------------------------------------------------------------ |
| 1–6   | Encapsulation             | Design classes with private fields and public access methods |
| 7–12  | Inheritance Types         | Single, Multilevel, Hierarchical, Interfaces, Composition    |
| 13–18 | Polymorphism              | Method overloading and overriding examples                   |
| 19–22 | Abstraction               | Interfaces and abstract classes with various implementations |
| 23–27 | Mixed / Combined concepts | Integrated designs using multiple OOP principles             |

1–6: Encapsulation
==================
1.Class: Person
Variables: private String name, private int age, private String country
Methods: public String getName(), public void setName(String), public int getAge(), public void setAge(int), public String getCountry(), public void setCountry(String)
main: Create a Person object, set all three fields, then print them.

2.Class: BankAccount
Variables: private String accountNumber, private double balance
Methods: public String getAccountNumber(), public void setAccountNumber(String), public double getBalance(), public void deposit(double), public void withdraw(double) (check sufficient balance)
main: Create account, deposit 1000, withdraw 200, display balance.

3.Class: Student
Variables: private String studentId, private String name, private double gpa
Methods: getters/setters, public void updateGpa(double), public boolean isOnHonorRoll() (returns gpa ≥ 3.5)
main: Instantiate, set GPA, update, check honor roll status.

4.Class: Book
Variables: private String title, private String author, private int yearPublished
Methods: getters/setters, public void updateAuthor(String), public String getSummary() (returns Title by Author, published Year)
main: Create Book, update author, print summary.

5.Class: Rectangle
Variables: private double length, private double width
Methods: getters/setters, public double calculateArea(), public double calculatePerimeter()
main: Create rectangle, set dimensions, compute and print area and perimeter.

6.Class: Employee
Variables: private String id, private String name, private double salary
Methods: getters/setters, public void raiseSalary(double percent) (increase salary), public String displayDetails()
main: Instantiate, give raise, print details.

7.Classes: Animal (base), Dog (subclass)
Animal: protected String name; public void eat(), public void sleep()
Dog: inherits base; adds public void bark()
main: Create Dog, set name, call eat, sleep, bark.

8.Classes: Vehicle → Car → ElectricCar (multilevel)
Vehicle: public void start()
Car: inherits, adds public void drive()
ElectricCar: inherits, adds public void chargeBattery()
main: Create ElectricCar, call start, drive, charge.

9.Superclass: Employee; Subclasses: Manager, Developer (hierarchical)
Employee: protected String name; public void work()
Manager: override work() (println “Managing team”)
Developer: override work() (println “Writing code”)
main: Create both, call work().

10.Interface: Shape with public void draw(); Implementations: Circle, Square
Circle implements draw (println “Drawing circle”); Square, similarly.
main: Create Shape[] array assigned with new Circle() and new Square(), loop and invoke draw() on each (polymorphism interface style).

11.Abstract Class: EmployeeBase with abstract void calculatePay(), plus public void work()
Subclasses: HourlyEmployee (override calculatePay to compute hourly × rate), SalariedEmployee (fixed pay)
main: Create both, call work() and calculatePay().

12.Interface-based multiple inheritance: 
interface Flyer with fly(), 
interface Swimmer with swim(); 
Class: Duck implements both, with both methods.
main: Create Duck, call fly() and swim().

Polymorphism (Overloading & Overriding)

13.Class: Calculator
Methods: public int add(int a, int b), public double add(double a, double b) (overloading)
main: Call both versions and print results.

14.Class: Printer
Methods: public void print(String), public void print(int), public void print(double)
main: Call print with different types.

15.Superclass: Bird with public void makeSound() (“Tweet”)
Subclass: Parrot overrides makeSound() (“Squawk”)
main: Bird b = new Parrot(); b.makeSound(); demonstrate dynamic dispatch.

16.Superclass: Instrument with public String play() (“Instrument playing”)
Subclass: Guitar, overrides play() (“Strumming guitar”)
main: Instrument inst = new Guitar(); print inst.play();

17.Class: MathUtils
Overloaded Methods: public int max(int, int), public double max(double, double), public int max(int, int, int)
main: Call all versions with appropriate arguments.

18.Class Hierarchy: Shape → Triangle, Rectangle (override public double area())
main: Shape s1 = new Rectangle(...), Shape s2 = new Triangle(...); print both s#.area().

19–25: Abstraction
19.Interface: PaymentMethod with pay(double amount)
Implementations: CreditCardPayment, UPIPayment overriding pay()
main: PaymentMethod p = new CreditCardPayment(); p.pay(500.0); Then switch to UPIPayment.


20.Abstract Class: Document with public abstract void print(), plus public void open()
Subclasses: PdfDocument, WordDocument, implement print()
main: Array of Document[], call open() and print().

21.Real-world abstraction: Create prompt: "Define an abstract Notification class with abstract void send(); 
subclasses EmailNotification, SMSNotification implement send()." 
Describe variables, methods, and main usage.

22.Design an abstract base for shapes: abstract Shape with abstract double area() and abstract double perimeter(). 
Subclasses: Circle, Square, Rectangle. 
Describe method signatures and sample main usage.

23–27: Mixed Concepts / Comprehension

23.Design prompt combining encapsulation & inheritance: Class User with private fields and getters/setters; subclass Admin adds public void banUser(User u).

24.Prompt: Explain how you’d use polymorphism to process different PaymentMethod objects, but emphasizing method overriding and reference types.

25.Prompt: Give an example of method overloading vs. overriding: describe class structure for both.

26.Prompt: Design a small inventory system: Product class (encapsulation: private fields), PerishableProduct extends it and overrides a method to check 
expiry (inheritance + polymorphism). Describe methods and main logic.

27.Prompt: Explain abstraction using interface Vehicle (methods start(), stop()), and multiple inheriting classes (Car, Bike) implementing the interface, 
plus subclass overriding start. Describe method calls in main().